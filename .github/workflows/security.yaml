name: Full Security Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security-tests:
    runs-on: ubuntu-latest

    steps:
      # Set up Docker Buildx (required for building and scanning images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Get values from config.json
      - name: Parse config.json
        run: |
          IMAGE_NAME=$(jq -r '.image_name' config.json)
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      # Verify IMAGE_NAME
      - name: Verify IMAGE_NAME
        run: echo "IMAGE_NAME is $IMAGE_NAME"

      # Set up Python for static code analysis
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      # Static Code Analysis with Bandit
      - name: Static Code Analysis with Bandit
        run: |
          pip install bandit
          bandit -r app/

      # Dependency Scan with Snyk CLI
      - name: Dependency Scan with Snyk
        run: |
          docker pull snyk/snyk:python-3.11
          docker run --rm -e SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} -v $(pwd):/project -w /project snyk/snyk:python-3.11 snyk test --file=requirements.txt --token=$SNYK_TOKEN

      # Docker Build and Container Scan with Trivy
      - name: Docker Build and Container Scan with Trivy
        run: |
          set -e  # Exit immediately if any command fails

          echo "Verifying Docker setup..."
          docker info

          echo "Building the Docker image..."
          echo "IMAGE_NAME is $IMAGE_NAME"
          docker build -t library/$IMAGE_NAME .
          docker images | grep "library/$IMAGE_NAME" || { echo "Image build failed"; exit 1; }

          echo "Logging into Docker Hub..."
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

          echo "Verifying Trivy setup..."
          docker pull aquasec/trivy:0.57.1
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock busybox echo "Docker socket accessible"

          echo "Running Trivy scan..."
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:0.57.1 \
            image library/$IMAGE_NAME

      # Secrets Scanning with Gitleaks
      - name: Secrets Scanning with Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: --no-git --path=.

      # Run OWASP ZAP Scan (DAST)
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:5001'

      # Secure Secrets Injection
      - name: Inject Secrets Securely
        run: |
          echo ${{ secrets.SECRET_KEY }} > .env
          echo ${{ secrets.DATABASE_URL }} >> .env

      # Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag $IMAGE_NAME ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
