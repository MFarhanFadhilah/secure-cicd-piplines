name: Full Security Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security-tests:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python for static code analysis
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      # Step 4: Static Code Analysis with Bandit
      - name: Static Code Analysis with Bandit
        run: |
          pip install bandit
          bandit -r app/


      # Debug step to check Snyk token validity
      - name: Check Snyk token
        run: |
          echo "Snyk Token: ${{ secrets.SNYK_TOKEN }}"  # Ensure your SNYK_TOKEN is valid

      # Install Snyk CLI and Run Dependency Scan
      - name: Install Snyk CLI and Run Dependency Scan
        run: |
          curl -sL https://snyk.io/install.sh | bash
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test || true  # This prevents failure if vulnerabilities are found

      # Step 6: Docker Build and Container Scan with Trivy
      - name: Docker Build and Container Scan with Trivy
        run: |
          docker build -t flask-app .
          docker run -d -p 5000:5000 --env-file .env flask-app
          curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.39.0/trivy_0.39.0_Linux-x86_64.tar.gz | tar -xz
          sudo mv trivy /usr/local/bin
          trivy image flask-app

      # Step 7: Secrets Scanning with Gitleaks
      - name: Secrets Scanning with Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: --no-git --path=.

      # Step 8: Run OWASP ZAP Scan (DAST)
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:5001'

      # Step 9: Secure Secrets Injection (from GitHub Secrets)
      - name: Inject Secrets Securely
        run: |
          echo ${{ secrets.SECRET_KEY }} > .env
          echo ${{ secrets.DATABASE_URL }} >> .env

      # Step 10: Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker tag flask-app ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest